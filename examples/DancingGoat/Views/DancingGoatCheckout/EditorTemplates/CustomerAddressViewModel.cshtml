@using DancingGoat.Commerce
@using DancingGoat.Models
@using DancingGoat.Helpers

@model CustomerAddressViewModel


@{
    var isBilling = !(Model is ShippingAddressViewModel);

    <h4>@(isBilling ? HtmlLocalizer["Billing address"] : HtmlLocalizer["Shipping address"])</h4>

    var addressType = isBilling ? "Billing" : "Shipping";
    var stateGroupName = "statesGroup" + addressType;
    var countryDropdownName = "countryDropdown" + addressType;
    var stateDropdownName = "stateDropdown" + addressType;
    var addressFieldsName = "fields" + addressType;
    var fieldStyle = isBilling ? "" : "display: none;";

    if (!isBilling)
    {
        var isSameAsBilling = (Model as ShippingAddressViewModel)?.IsSameAsBilling ?? false;
        if (!isSameAsBilling)
        {
            fieldStyle = "";
        }

        <div class="form-group">
            <div class="form-group-input">
                @Html.CheckBoxFor(m => isSameAsBilling, new { @id = "toggleShipping" }) @HtmlLocalizer["Same as billing"]
            </div>
        </div>
    }
}

@{
<div id="@addressFieldsName" style="@fieldStyle">
    @Html.ValidatedEditorFor(m => m.Line1)
    @Html.ValidatedEditorFor(m => m.Line2)
    @Html.ValidatedEditorFor(m => m.City)
    @Html.ValidatedEditorFor(m => m.PostalCode)

    <div class="form-group">
        <div class="form-group-label">
            @Html.LabelFor(m => m.CountryId)
        </div>
        <div class="form-group-input">
            @Html.DropDownListFor(m => m.CountryId, Model.Countries, HtmlLocalizer["Select a country"].Value, new { @id = @countryDropdownName, data_storage = $"{addressType}Address_{nameof(CustomerAddressViewModel.Country)}" })
        </div>
        <div class="message message-error error-label">
            @Html.ValidationMessageFor(m => m.CountryId)
        </div>
    </div>

    <div class="form-group" id="@stateGroupName">
        <div class="form-group-label">
            @Html.LabelFor(m => m.StateId)
        </div>
        <div class="form-group-input">
            @Html.DropDownListFor(m => m.StateId, Model.States, HtmlLocalizer["Select a state"].Value, new { @id = @stateDropdownName, data_storage = $"{addressType}Address_{nameof(CustomerAddressViewModel.State)}" })
        </div>
        <div class="message message-error error-label">
            @Html.ValidationMessageFor(m => m.StateId)
        </div>
    </div>
</div>
}

<script>
    document.addEventListener('DOMContentLoaded', function () {
        var statesGroup = document.getElementById('@stateGroupName');
        var statesDropdown = document.getElementById('@stateDropdownName');
        var countryDropdown = document.getElementById('@countryDropdownName');

        if (statesDropdown.children.length > 1) {
            statesGroup.style.display = 'block';
        } else {
            statesGroup.style.display = 'none';
        }

        var toggle = document.getElementById('toggleShipping');
        if (toggle && !window.shippingListenerAdded) {
            toggle.addEventListener('change', function() { 
                const shippingFields = document.getElementById('fieldsShipping');
                shippingFields.style.display = this.checked ? 'none' : 'block';
            });
            window.shippingListenerAdded = true;
        }

        countryDropdown.addEventListener('change', function() {
            const url = '@Url.Action(nameof(DancingGoatCheckoutController.GetStates), "DancingGoatCheckout")';
            const formData = new FormData();
            formData.append('CountryId', countryDropdown.value);

            const urlEncodedData = new URLSearchParams(formData).toString();

            fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded'
                },
                body: urlEncodedData
            })
                .then(response => {
                    if (response.ok) {
                        return response.json();
                    }
                    throw new Error('Network response was not ok.');
                })
                .then(states => {
                    if (states.length > 0) {
                        states.forEach(state => {
                            const option = document.createElement('option');
                            option.text = state.text;
                            option.value = state.value;
                            statesDropdown.appendChild(option);
                        });

                        const value = localStorage.getItem("@(addressType)Address_@nameof(CustomerAddressViewModel.StateId)");
                        if (states.some(state => state.value === value)) {
                            statesDropdown.value = value;
                            localStorage.setItem("@(addressType)Address_@nameof(CustomerAddressViewModel.State)", statesDropdown.options[statesDropdown.selectedIndex].text);
                        }
                        else {
                            localStorage.removeItem("@(addressType)Address_@nameof(CustomerAddressViewModel.State)");
                        }

                    } else {
                        while (statesDropdown.firstChild) {
                            statesDropdown.removeChild(statesDropdown.firstChild);
                        }
                        localStorage.removeItem("@(addressType)Address_@nameof(CustomerAddressViewModel.State)");
                    }

                    if (statesDropdown.children.length > 1) {
                        statesGroup.style.display = 'block';
                    } else {
                        statesGroup.style.display = 'none';
                    }
                })
                .catch(error => {
                    console.error('Fetch error:', error);
                });
        });
    });
</script>
