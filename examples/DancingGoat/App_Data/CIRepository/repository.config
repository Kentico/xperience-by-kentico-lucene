<?xml version="1.0" encoding="utf-8"?>
<RepositoryConfiguration Version="2" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  
  
  <!-- After changing the included or excluded object types, you need to run the serialization for all objects to return
       the repository into a consistent state. Use the CLI and execute the store command for Continuous Integration or Deployment.
       Always synchronize the repository.config along with the other content of the repository folder. -->

  <!-- To learn which object types can be used in the IncludedObjectTypes and ExcludedObjectTypes definitions,
       visit the documentation: https://devnet.kentico.com/CMSPages/DocLinkMapper.ashx?version=xp&link=ci_object_types -->

  <!-- If one or more main object types are specified, only objects of the given type and their child types are processed. 
       Must explicitly include *all* objects tracked by the repository, with the exception of content-item related objects,
       which are included using '<IncludedContentItemsOfType>'. -->
  <IncludedObjectTypes>
    <!-- Includes all supported object types by default -->
    <IncludeAll />
    <!-- <ObjectType>ObjectTypeA</ObjectType> -->
    <!-- <ObjectType>ObjectTypeB</ObjectType> -->
  </IncludedObjectTypes>

  <!-- Excluded object types filter the set of included object types. The specified object types are excluded from processing. 
       May include both main and child object types, with the exception of content-item related objects, which are excluded using '<ExcludedContentItemsOfType>' -->
  <ExcludedObjectTypes>
    <!-- Settings may contain sensitive data and are excluded by default.
         Only remove the exclusion if you agree to make setting values available within the file system used by the application
         and any connected systems. -->
    <ObjectType>cms.settingskey</ObjectType>
    <!-- <ObjectType>ObjectTypeX</ObjectType> -->
    <!-- <ObjectType>ObjectTypeY</ObjectType> -->
  </ExcludedObjectTypes>

  <!-- Lists the types of content items tracked by the repository.
       The element must explicitly list all content items tracked by the repository.

       After changing the included or excluded content items, you need to run the serialization
       for all objects to return the repository into a consistent state.

       <IncludedContentItemsOfType>
         Includes all content items of a specific type using the type's code name.
         <ContentType>DancingGoat.Coffee</ContentType>
         <ContentType>DancingGoat.Article</ContentType>

         For initial import into the target instance under the CD 'Create' mode,
         you can use the IncludeAll shorthand to automatically store/restore all content items.
         <IncludeAll />
       </IncludedContentItemsOfType>
       -->
    
    <IncludedContentItemsOfType>
        <IncludeAll />
    </IncludedContentItemsOfType>

  <!-- The ExcludedContentItemsOfType element provides an optional mechanism to refine which content items are tracked.
       While the element itself is optional, if included in the configuration, it must contain one or more `ContentType` 
       elements specifying content types. 
       
       The content types listed within `ExcludedContentItemsOfType` are removed from the set of items
       initially defined by the `IncludedContentItemsOfType` element. This is useful for scenarios where you want
       to include a broad category (using `<IncludeAll />` within `IncludedContentItemsOfType`) but specifically
       omit certain types from being tracked by the repository.
       
       <ExcludedContentItemsOfType>
           <ContentType>DancingGoat.Article</ContentType>
       </ExcludedContentItemsOfType>
       -->

  <!-- You can exclude objects from processing by adding included or excluded code names for any object type. 
       Use the % wildcard at the start or end of the values to include or exclude multiple objects based on code name prefixes or suffixes.
       You can add multiple code name values separated by semicolons for each object type. -->
  <ObjectFilters>
    <!-- If one or more code names are included, only objects matching the specified code names are included. Other objects are not processed. 
         All objects are included if empty. -->
    <!-- <IncludedCodeNames>IncludedCodeNameA;IncludedCodeNameB</IncludedCodeNames> -->
    <!-- <IncludedCodeNames ObjectType="ObjectTypeB">IncludedCodeNamePrefix%;%IncludedCodeNameSuffix</IncludedCodeNames> -->

    <!-- Excluded code names add further filtering for the set of included objects. Objects that match the specified code names are excluded from processing. -->
    <!-- <ExcludedCodeNames ObjectType="ObjectTypeA">ExcludedCodeNameA;ExcludedCodeNameB</ExcludedCodeNames> -->
    <!-- <ExcludedCodeNames>ExcludedCodeNamePrefix%;%ExcludedCodeNameSuffix</ExcludedCodeNames> -->
  </ObjectFilters>

  <!-- For more granular control beyond type-level inclusion/exclusion, the `ContentItemFilters` 
       element allows filtering of individual content items based on their code names, irrespective of type.

       Within this element, child elements `ContentItemFilters` and `ExcludedContentItemNames` 
       specify item code name patterns that filter individual tracked items. You can use the `%` character as
       a wildcard to match multiple code names. -->
  <ContentItemFilters>
    <!-- Include only items whose code names match the pattern 'News_%' -->
    <!-- <IncludedContentItemNames>News_%</IncludedContentItemNames> -->

    <!-- You could also use <ExcludedContentItemNames> here to exclude specific names. For example: -->
    <!-- <ExcludedContentItemNames>News_Internal%</ExcludedContentItemNames> -->
  </ContentItemFilters>

</RepositoryConfiguration>